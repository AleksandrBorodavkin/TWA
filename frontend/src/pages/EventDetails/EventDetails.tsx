import {Page} from '@/components/Page';
import {useEffect, useState} from 'react';
import {useParams} from 'react-router-dom';
import {initData, miniApp} from "@telegram-apps/sdk-react";
import {Button, List, Spinner} from "@telegram-apps/telegram-ui";
import './EventDetails.css';
import {getEventDetail} from "@/api/getEventDetails.ts";
import {addUserToEvent} from "@/api/eventParticipants.ts";
import {removeUserFromEvent} from "@/api/removeUserFromEvent.ts";
import {generateIcsFile} from '@/utils/generateIcsFile';
import {IEvent} from "@/types/eventTypes.ts";
import {handlerChangeStatusEvent} from "@/api/changeEventStatus.ts";
import {markParticipantAsPaid} from "@/api/markParticipantAsPaid.ts";

export const EventDetails = () => {
    const [eventDetails, setEventDetails] = useState<IEvent | null>(null);
    const currentUser = initData.user();
    const [sentStatus, setSentStatus] = useState<string>();
    const [buttonParticipantCount, setButtonParticipantCount] = useState<number | null>();
    const {eventId} = useParams<{ eventId: string }>();
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [limitOfParticipantsExceeded, setLimitOfParticipantsExceeded] = useState<boolean>(false);
    const [updateParticipationCount, setUpdateParticipationCount] = useState(false)
    const [checkBoxStatus, setCheckBoxStatus] = useState(false)
    const [refreshKey, setRefreshKey] = useState(0);

    useEffect(() => {
        if (eventId) {
            setIsLoading(true);
            setError(null);

            getEventDetail(eventId)
                .then(event => {
                    setEventDetails(event);

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if (event.totalParticipantsCount >= event.limit) {
                        setLimitOfParticipantsExceeded(true);
                    } else {
                        setLimitOfParticipantsExceeded(false);
                    }
                })
                .catch(() => {
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                    miniApp.close()}
                )
                .finally(() => setIsLoading(false));
        }
    }, [sentStatus, buttonParticipantCount, checkBoxStatus, refreshKey]);

    useEffect(() => {
        if (eventDetails) {
            const userExists = eventDetails.participants.some(
                user => Number(user.telegramId) === Number(currentUser?.id)
            );
            const currentUserParticipation = eventDetails.participants.find(
                participant => participant.telegramId.toString() === currentUser?.id.toString()
            );

            if (userExists) {
                setSentStatus('–£–π—Ç–∏');


                const currentUserParticipationCount = currentUserParticipation?.participationCount || 0;
                setButtonParticipantCount(currentUserParticipationCount)
            } else {
                setSentStatus('–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ');
            }
        }
    }, [eventDetails, buttonParticipantCount, checkBoxStatus]);

    const handleParticipation = async (action: 'add' | 'remove') => {
        if (!eventId || !currentUser) return;

        try {
            const participantData = action === 'add'
                ? await addUserToEvent(eventId, { id: currentUser.id, username: currentUser.username! })
                : await removeUserFromEvent(eventId, { id: currentUser.id, username: currentUser.username! });


            // @ts-ignore
            setButtonParticipantCount(participantData?.updatedParticipant?.count || 0);

            await refreshEventDetails();

            // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏, –ø–æ–∫–∞–∑–∞—Ç—å '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', –∏–Ω–∞—á–µ —Å–∫—Ä—ã—Ç—å
            setSentStatus(action === 'remove' ? '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ' : '–£–π—Ç–∏');
            setLimitOfParticipantsExceeded(false);
        } catch (error) {
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);


            // @ts-ignore
            if (error.message === '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.') {
                setLimitOfParticipantsExceeded(true);
            }
        } finally {
            setUpdateParticipationCount(false);
        }
    };

    const updateParticipantCount = async (action: 'add' | 'remove') => {
        if (!eventId || !currentUser || updateParticipationCount) return;
        setUpdateParticipationCount(true);

        await handleParticipation(action);
    };

    const refreshEventDetails = async () => {
        if (!eventId) {
            console.warn('eventId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å, –µ—Å–ª–∏ eventId = undefined
        }
        try {
            const updatedEvent = await getEventDetail(eventId);
            setEventDetails(updatedEvent);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏:', error);
        }
    };



    const handleExportIcs = () => {
        if (eventDetails) {
            generateIcsFile(eventDetails);
        }
    };
    const handlerStatusChange = async () => {
        setIsLoading(true);
        if (!eventDetails) {
            console.warn('eventId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å, –µ—Å–ª–∏ eventId = undefined
        }
        try {
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ event.id - —á–∏—Å–ª–æ

            await handlerChangeStatusEvent(Number(eventDetails.id), !eventDetails.status);
            setCheckBoxStatus(eventDetails?.status);
        } catch (error) {
            console.error("Update failed:", error);
        } finally {
            setIsLoading(false);
        }

    };
    const handlerMarkParticipantAsPaid = async (participantTelegramId: string, paid: boolean) => {
        setIsLoading(true);
        if (!eventDetails) {
            console.warn('eventId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å, –µ—Å–ª–∏ eventId = undefined
        }
        try {

            await markParticipantAsPaid(eventDetails.id, participantTelegramId, paid);
            setRefreshKey(prev => prev + 1);

        } catch (error) {
            console.error("markParticipantAsPaid failed:", error);
        } finally {
            setIsLoading(false);
        }
    }


    if (isLoading) {
        return (
            <div style={{textAlign: 'center', marginTop: '5rem'}}>
                <Spinner size="l"/>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div style={{textAlign: 'center', marginTop: '5rem'}}>
                <p style={{color: 'red'}}>{error}</p>
            </div>
        );
    }

    if (!eventDetails) {
        return (
            <div style={{textAlign: 'center', marginTop: '5rem'}}>
                <p>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
            </div>
        );
    }

    const date = new Date(eventDetails.date);

    return (
        <Page>
            <div className={'section-details'}>
                <div>
                    <div className={'header border'}>
                        {`${eventDetails?.title}`}
                    </div>
                    <div>

                        {String(currentUser?.id) === eventDetails.creator.telegramId && (
                            <div className={'border'}>
                                <input
                                    type="checkbox"
                                    checked={eventDetails.status}
                                    onChange={handlerStatusChange}
                                    disabled={isLoading}
                                />
                                {eventDetails.status ? "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ" : "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}
                                {isLoading && " (Updating...)"}
                            </div>
                        )}

                    </div>
                </div>

                <div className={'info-container border'}>
                    <div className={' creator'}>
                        <span>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {eventDetails.creator.firstName} {eventDetails.creator.lastName}</span>

                        {eventDetails.creator.userName && (
                            <a
                                href={"https://t.me/" + eventDetails.creator.userName}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                üí¨
                            </a>
                        )}
                    </div>
                </div>
                <div className="info-container border">
                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ .ics */}
                    <div className={"time"} onClick={handleExportIcs}>
                        üìÖ {`${date.getDate()} ${date.toLocaleString("ru-RU", {month: "long"})} ${date.getFullYear()}`}
                        <br/>
                        ‚è∞ {`${date.getHours()}:${String(date.getMinutes()).padStart(2, "0")}`}
                    </div>
                    <div className={"limit"}>
                        –ú–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å: {Number(eventDetails.limit) - Number(eventDetails.totalParticipantsCount)}<br/>
                        –í—Å–µ–≥–æ –º–µ—Å—Ç: {eventDetails.limit}
                    </div>
                </div>
                <div className={"description border"}> {eventDetails?.description}</div>
            </div>

            <div className="centre">
                {sentStatus === '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ' ? (
                    <Button
                        className=""
                        mode="bezeled"
                        size="s"
                        disabled={isLoading || updateParticipationCount}
                        onClick={() => updateParticipantCount('add')}
                    >
                        ü§ù –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
                    </Button>
                ) : (
                    <>
                        {/* –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–£–π—Ç–∏", –ø–æ–∫–∞–∑–∞—Ç—å ‚ûñ –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ */}
                        <Button
                            className=""
                            mode="bezeled"
                            size="s"
                            disabled={isLoading || updateParticipationCount}
                            onClick={() => updateParticipantCount('remove')}
                        >
                            ‚ûñ
                        </Button>

                        {buttonParticipantCount || 1}

                        <Button
                            className=""
                            mode="bezeled"
                            size="s"
                            disabled={isLoading || limitOfParticipantsExceeded || updateParticipationCount}
                            onClick={() => updateParticipantCount('add')}
                        >
                            ‚ûï
                        </Button>
                    </>
                )}
            </div>


            <List>
                {eventDetails?.participants.map((participant, index) => (
                    <div className="participant" key={participant.id}>
                        {participant.userName && (
                            <a
                                href={"https://t.me/" + participant.userName}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                {index + 1}. {participant.firstName} {participant.lastName}
                            </a>
                        )}
                        {!participant.userName && (
                            <div>
                                {index + 1}. {participant.firstName} {participant.lastName}
                            </div>
                        )}
                        <div style={{marginLeft: 'auto'}}>–ú–µ—Å—Ç: {participant.participationCount}&nbsp;&nbsp;
                            {String(currentUser?.id) === String(eventDetails.creator.telegramId) && (
                                <span key={refreshKey}>
        <button
            className={participant.paid ? 'paid-button' : 'unpaid-button'}
            disabled={isLoading}
            onClick={() => handlerMarkParticipantAsPaid(participant.telegramId, !participant.paid)}
        >
            {participant.paid ? '‚úì' : '‚ÇΩ'}
        </button>
    </span>
                            )}
                        </div>

                    </div>
                ))}
            </List>
        </Page>
    );
};
