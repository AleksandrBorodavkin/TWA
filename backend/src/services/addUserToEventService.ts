import {getInitData} from "../middleware/authMiddleware";
import {PrismaClient} from '.prisma/client';
import {Request, Response} from "express";
import {IEvent} from "../interfaces/IEvent";
import {getEventByIdWithUsersService} from "./Service";
import {sendTelegramNotification} from "../utils/sendTelegramNotification";
import {notifyCreator} from "../utils/telegramNotify";


const prisma = new PrismaClient();

export const addUserToEventService = async (req: Request, res: Response) => {
    const currentUser = getInitData(res).user;
    const { eventId } = req.params;

    const event = await prisma.event.findUnique({
        where: { id: parseInt(eventId) },
    });

    if (!event) {
        return res.status(404).json({ error: 'Event not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const eventDetails = await getEventByIdWithUsersService(eventId.toString());
    const isReserve = eventDetails.totalParticipantsCount >= eventDetails.limit;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    let user = await prisma.user.findUnique({
        where: { telegramId: String(currentUser.id) },
    });

    if (!user) {
        user = await prisma.user.create({
            data: {
                telegramId: String(currentUser.id),
                allowsWriteToPm: currentUser.allows_write_to_pm,
                userName: currentUser.username,
                firstName: currentUser.first_name,
                lastName: currentUser.last_name,
                languageCode: currentUser.language_code,
            },
        });
    }

    const existingParticipation = await prisma.userEvent.findUnique({
        where: {
            userId_eventId: {
                userId: user.id,
                eventId: event.id,
            },
        },
    });

    let newParticipation;

    if (existingParticipation) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        newParticipation = await prisma.userEvent.update({
            where: {
                userId_eventId: {
                    userId: user.id,
                    eventId: event.id,
                },
            },
            data: isReserve
                ? { reserveParticipantsCount: { increment: 1 } }
                : { mainParticipantsCount: { increment: 1 } },
        });
    } else {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        newParticipation = await prisma.userEvent.create({
            data: {
                userId: user.id,
                eventId: event.id,
                mainParticipantsCount: isReserve ? 0 : 1,
                reserveParticipantsCount: isReserve ? 1 : 0,
            },
        });
    }
    const role = isReserve ? "–≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫" : "–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫";
    const total = eventDetails.totalParticipantsCount + 1;
    await notifyCreator(event.id,`‚ûï ${user.firstName} ${user?.lastName} (${user.userName ? '@' + user.userName : '–±–µ–∑ username'}) \n–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ${role}`

)

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
    // const creator = await prisma.user.findUnique({
    //     where: { id: event.creatorId },
    // });
    // if (creator?.telegramId) {
    //     const role = isReserve ? "–≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫" : "–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫";
    //     const total = eventDetails.totalParticipantsCount + 1;
    //     await sendTelegramNotification(
    //         creator.telegramId,
    //         `‚ûï ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (${user.userName ? '@' + user.userName : '–±–µ–∑ username'}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ${role} —Å–æ–±—ã—Ç–∏—è ¬´${event.title}¬ª.\n` +
    //         `üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${total}/${event.limit}`
    //     );
    // }



    return {
        newParticipant: newParticipation,
        newEvent: event,
        isReserve,
        message: isReserve
            ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    };
};
