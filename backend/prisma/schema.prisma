// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client" // Adjust this path as needed
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель User
model User {
  id              Int         @id @default(autoincrement())
  telegramId      String      @unique
  allowsWriteToPm Boolean
  firstName       String
  lastName        String?
  userName        String?
  languageCode    String?
  events          Event[]     @relation("UserEvent") // Связь с Event через таблицу UserEvent
  UserEvent       UserEvent[]
  Event           Event[]
}

// Модель Event
model Event {
  id          Int         @id @default(autoincrement())
  creatorId   Int // Связь с User
  creator     User        @relation(fields: [creatorId], references: [id])
  title       String
  description String
  date        DateTime    @db.Timestamptz // Изменяем тип на TIMESTAMPTZ
  users       User[]      @relation("UserEvent") // Связь с User через таблицу UserEvent
  limit       Int
  status      Boolean
  totalAmount Float       @default(0) // Общая сумма мероприятия
  UserEvent   UserEvent[]
}

// Таблица для связи многие-ко-многим между User и Event
model UserEvent {
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
  eventId Int
  event   Event   @relation(fields: [eventId], references: [id])
  count   Int     @default(1) // Количество участий
  paid    Boolean @default(false) // Поле для отслеживания оплаты
  amount  Float   @default(0) // Сумма, оплаченная участником

  @@id([userId, eventId]) // Составной первичный ключ
}
